{"ast":null,"code":"import _defineProperty from \"/home/ec2-user/DUMDEV/mywebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/ec2-user/DUMDEV/mywebsite/src/components/pages/PostsPage.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { fetchPosts } from '../../actions';\nimport dateTrimmer from '../../atoms/dateTrim';\nimport ScrollUpdater from '../../atoms/ScrollUpdater';\nimport InfiniteScroll from 'react-infinite-scroller';\n\nclass PostList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderPost = post => {\n      if (post === undefined) return;\n      if (post === {}) return;\n\n      const _post = _objectSpread({}, post),\n            id = _post.id,\n            headers = _post.headers,\n            content = _post.content;\n\n      const _headers = _objectSpread({}, headers),\n            title = _headers.title,\n            author = _headers.author,\n            image = _headers.image,\n            published = _headers.published,\n            data = _headers.data;\n\n      const _image = \"https://\".concat(image.slice(7));\n\n      const date = new dateTrimmer(data.created);\n      return React.createElement(\"div\", {\n        className: \"post-content\",\n        key: post.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"post-card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: \"/posts/\".concat(post.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card-dot\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"card-image\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: _image,\n        height: \"160\",\n        width: \"320\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"post-published\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, date.postDate()), React.createElement(\"div\", {\n        className: \"post-author\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, author), React.createElement(\"div\", {\n        className: \"post-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, title), React.createElement(\"div\", {\n        className: \"post-Intro\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, content))));\n    };\n\n    this.postsLoader = async page => {\n      // controll end of Infinty scroll\t\n      const endPostFlag = await this.props.fetchPosts(page - 1);\n\n      if (endPostFlag === false) {\n        this.setState(state => {\n          return {\n            hasMoreItems: false\n          };\n        });\n      } // Starting point of page is 1, So we need to set it as 0\n\n\n      const start = (page - 1) * 5;\n      const end = page * 5;\n      const posts = [];\n\n      for (let i = start; i < end; i++) {\n        posts.push(this.renderPost(this.props.posts[i]));\n      }\n\n      this.setState(state => {\n        return {\n          prettyPosts: this.state.prettyPosts.concat(posts)\n        };\n      });\n    };\n\n    this.state = {\n      hasMoreItems: true,\n      prettyPosts: []\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"infinite-scroll\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(InfiniteScroll, {\n      pageStart: 0,\n      loadMore: this.postsLoader,\n      hasMore: this.state.hasMoreItems,\n      loader: React.createElement(\"div\", {\n        className: \"loader\",\n        key: 0,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \"Loading ...\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, this.state.prettyPosts));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    posts: state.posts,\n    currentId: state.auth.userId,\n    isSignedIn: state.auth.isSignedIn\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchPosts\n})(PostList);","map":{"version":3,"sources":["/home/ec2-user/DUMDEV/mywebsite/src/components/pages/PostsPage.js"],"names":["React","connect","Link","fetchPosts","dateTrimmer","ScrollUpdater","InfiniteScroll","PostList","Component","constructor","props","renderPost","post","undefined","id","headers","content","title","author","image","published","data","_image","slice","date","created","postDate","postsLoader","page","endPostFlag","setState","state","hasMoreItems","start","end","posts","i","push","prettyPosts","concat","render","mapStateToProps","currentId","auth","userId","isSignedIn"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { fetchPosts } from '../../actions';\nimport dateTrimmer from '../../atoms/dateTrim';\nimport ScrollUpdater   from '../../atoms/ScrollUpdater';\nimport InfiniteScroll from 'react-infinite-scroller';\n\nclass PostList extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\t\thasMoreItems:true,\n\t\t\t\tprettyPosts:[]\n\t\t}\n\t}\n\n\trenderPost = (post) => {\n\t\tif( post === undefined) return;\n\t\tif( post === {} ) return ;\n\t\tconst {id , headers, content } = { ...post };\n\t \tconst { title, author, image, published, data } = { ... headers};\n\t\t\t\n\t\tconst _image = `https://${image.slice(7)}`;\n\t\tconst date = new dateTrimmer(data.created);\n\t\treturn (\n\t\t\t\t<div className=\"post-content\" key={ post.id }>\n\t\t\t\t\t<div className=\"post-card\">\n\t\t\t\t\t\t<Link to={`/posts/${ post.id }`}>\n\t\t\t\t\t\t<div className=\"card-dot\">\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"card-image\">\n\t\t\t\t\t\t\t\t<img src={ _image } height=\"160\" width=\"320\"/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"post-published\">\n\t\t\t\t\t\t\t{ date.postDate() }\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"post-author\">\n\t\t\t\t\t\t\t{ author }\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"post-title\">\n\t\t\t\t\t\t\t{ title }\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"post-Intro\">\n\t\t\t\t\t\t\t{ content }\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Link>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\n\t\t\t);\n\t}\n\t\n\tpostsLoader = async (page) => {\n\t\t// controll end of Infinty scroll\t\n\t\tconst endPostFlag = await this.props.fetchPosts(page-1);\n\t\tif ( endPostFlag === false  ){ \n\t\t\tthis.setState( (state) => {return {hasMoreItems: false }})\n\t\t}\t\t\n\t\t// Starting point of page is 1, So we need to set it as 0\n\t\tconst start = (page-1)*5;\n\t\tconst end = (page)*5;\n\t\tconst posts = [];\n\t\tfor ( let i=start ; i<end ; i++){\n\t\t\tposts.push(this.renderPost(this.props.posts[i]));\n\t\t}\n\t\tthis.setState(state => {\n\t\t\treturn { prettyPosts: this.state.prettyPosts.concat(posts)};\n\t\t});\n\t}\n\t\n\trender(){\n\t\t\treturn (<div className=\"infinite-scroll\">\n\t\t\t\t\t<InfiniteScroll\n\t\t\t\t\t    pageStart={0}\n\t\t\t\t\t\tloadMore={this.postsLoader}\n\t\t\t\t\t    hasMore={this.state.hasMoreItems}\n\t\t\t\t\t    loader={<div className=\"loader\" key={0}>Loading ...</div>}\n\t\t\t\t\t>\n\t\t\t\t\t\t{this.state.prettyPosts}\n\t\t\t\t\t</InfiniteScroll>\n\t\t\t\t\t</div>\n\t\t\t);\n\t}\n}\n\nconst mapStateToProps = state => {\n\t\treturn {\n\t\t\tposts: state.posts,\n\t\t\tcurrentId: state.auth.userId,\n\t\t\tisSignedIn: state.auth.isSignedIn\n\t};\n}\n\nexport default connect(mapStateToProps,{ fetchPosts })(PostList);\n"]},"metadata":{},"sourceType":"module"}