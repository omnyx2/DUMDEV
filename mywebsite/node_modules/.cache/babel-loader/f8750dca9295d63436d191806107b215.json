{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { getEntityRanges, BLOCK_TYPE, ENTITY_TYPE, INLINE_STYLE } from 'draft-js-utils';\nvar BOLD = INLINE_STYLE.BOLD,\n    CODE = INLINE_STYLE.CODE,\n    ITALIC = INLINE_STYLE.ITALIC,\n    STRIKETHROUGH = INLINE_STYLE.STRIKETHROUGH,\n    UNDERLINE = INLINE_STYLE.UNDERLINE;\nvar CODE_INDENT = '    ';\nvar defaultOptions = {\n  gfm: false\n};\n\nvar MarkupGenerator =\n/*#__PURE__*/\nfunction () {\n  function MarkupGenerator(contentState, options) {\n    _classCallCheck(this, MarkupGenerator);\n\n    _defineProperty(this, \"blocks\", void 0);\n\n    _defineProperty(this, \"contentState\", void 0);\n\n    _defineProperty(this, \"currentBlock\", void 0);\n\n    _defineProperty(this, \"output\", void 0);\n\n    _defineProperty(this, \"totalBlocks\", void 0);\n\n    _defineProperty(this, \"listItemCounts\", void 0);\n\n    _defineProperty(this, \"options\", void 0);\n\n    this.contentState = contentState;\n    this.options = options || defaultOptions;\n  }\n\n  _createClass(MarkupGenerator, [{\n    key: \"generate\",\n    value: function generate() {\n      this.output = [];\n      this.blocks = this.contentState.getBlockMap().toArray();\n      this.totalBlocks = this.blocks.length;\n      this.currentBlock = 0;\n      this.listItemCounts = {};\n\n      while (this.currentBlock < this.totalBlocks) {\n        this.processBlock();\n      }\n\n      return this.output.join('');\n    }\n  }, {\n    key: \"processBlock\",\n    value: function processBlock() {\n      var block = this.blocks[this.currentBlock];\n      var blockType = block.getType();\n\n      switch (blockType) {\n        case BLOCK_TYPE.HEADER_ONE:\n          {\n            this.insertLineBreaks(1);\n            this.output.push('# ' + this.renderBlockContent(block) + '\\n');\n            break;\n          }\n\n        case BLOCK_TYPE.HEADER_TWO:\n          {\n            this.insertLineBreaks(1);\n            this.output.push('## ' + this.renderBlockContent(block) + '\\n');\n            break;\n          }\n\n        case BLOCK_TYPE.HEADER_THREE:\n          {\n            this.insertLineBreaks(1);\n            this.output.push('### ' + this.renderBlockContent(block) + '\\n');\n            break;\n          }\n\n        case BLOCK_TYPE.HEADER_FOUR:\n          {\n            this.insertLineBreaks(1);\n            this.output.push('#### ' + this.renderBlockContent(block) + '\\n');\n            break;\n          }\n\n        case BLOCK_TYPE.HEADER_FIVE:\n          {\n            this.insertLineBreaks(1);\n            this.output.push('##### ' + this.renderBlockContent(block) + '\\n');\n            break;\n          }\n\n        case BLOCK_TYPE.HEADER_SIX:\n          {\n            this.insertLineBreaks(1);\n            this.output.push('###### ' + this.renderBlockContent(block) + '\\n');\n            break;\n          }\n\n        case BLOCK_TYPE.UNORDERED_LIST_ITEM:\n          {\n            var blockDepth = block.getDepth();\n            var lastBlock = this.getLastBlock();\n            var lastBlockType = lastBlock ? lastBlock.getType() : null;\n            var lastBlockDepth = lastBlock && canHaveDepth(lastBlockType) ? lastBlock.getDepth() : null;\n\n            if (lastBlockType !== blockType && lastBlockDepth !== blockDepth - 1) {\n              this.insertLineBreaks(1); // Insert an additional line break if following opposite list type.\n\n              if (lastBlockType === BLOCK_TYPE.ORDERED_LIST_ITEM) {\n                this.insertLineBreaks(1);\n              }\n            }\n\n            var indent = ' '.repeat(block.depth * 4);\n            this.output.push(indent + '- ' + this.renderBlockContent(block) + '\\n');\n            break;\n          }\n\n        case BLOCK_TYPE.ORDERED_LIST_ITEM:\n          {\n            var _blockDepth = block.getDepth();\n\n            var _lastBlock = this.getLastBlock();\n\n            var _lastBlockType = _lastBlock ? _lastBlock.getType() : null;\n\n            var _lastBlockDepth = _lastBlock && canHaveDepth(_lastBlockType) ? _lastBlock.getDepth() : null;\n\n            if (_lastBlockType !== blockType && _lastBlockDepth !== _blockDepth - 1) {\n              this.insertLineBreaks(1); // Insert an additional line break if following opposite list type.\n\n              if (_lastBlockType === BLOCK_TYPE.UNORDERED_LIST_ITEM) {\n                this.insertLineBreaks(1);\n              }\n            }\n\n            var _indent = ' '.repeat(_blockDepth * 4); // TODO: figure out what to do with two-digit numbers\n\n\n            var count = this.getListItemCount(block) % 10;\n            this.output.push(_indent + \"\".concat(count, \". \") + this.renderBlockContent(block) + '\\n');\n            break;\n          }\n\n        case BLOCK_TYPE.BLOCKQUOTE:\n          {\n            this.insertLineBreaks(1);\n            this.output.push(' > ' + this.renderBlockContent(block) + '\\n');\n            break;\n          }\n\n        case BLOCK_TYPE.CODE:\n          {\n            this.insertLineBreaks(1);\n\n            if (this.options.gfm) {\n              var language = block.getData() && block.getData().get('language') ? block.getData().get('language') : '';\n              this.output.push(\"```\".concat(language, \"\\n\"));\n              this.output.push(this.renderBlockContent(block) + '\\n');\n              this.output.push('```\\n');\n            } else {\n              this.output.push(CODE_INDENT + this.renderBlockContent(block) + '\\n');\n            }\n\n            break;\n          }\n\n        default:\n          {\n            this.insertLineBreaks(1);\n            this.output.push(this.renderBlockContent(block) + '\\n');\n            break;\n          }\n      }\n\n      this.currentBlock += 1;\n    }\n  }, {\n    key: \"getLastBlock\",\n    value: function getLastBlock() {\n      return this.blocks[this.currentBlock - 1];\n    }\n  }, {\n    key: \"getNextBlock\",\n    value: function getNextBlock() {\n      return this.blocks[this.currentBlock + 1];\n    }\n  }, {\n    key: \"getListItemCount\",\n    value: function getListItemCount(block) {\n      var blockType = block.getType();\n      var blockDepth = block.getDepth(); // To decide if we need to start over we need to backtrack (skipping list\n      // items that are of greater depth)\n\n      var index = this.currentBlock - 1;\n      var prevBlock = this.blocks[index];\n\n      while (prevBlock && canHaveDepth(prevBlock.getType()) && prevBlock.getDepth() > blockDepth) {\n        index -= 1;\n        prevBlock = this.blocks[index];\n      }\n\n      if (!prevBlock || prevBlock.getType() !== blockType || prevBlock.getDepth() !== blockDepth) {\n        this.listItemCounts[blockDepth] = 0;\n      }\n\n      return this.listItemCounts[blockDepth] = this.listItemCounts[blockDepth] + 1;\n    }\n  }, {\n    key: \"insertLineBreaks\",\n    value: function insertLineBreaks(n) {\n      if (this.currentBlock > 0) {\n        for (var i = 0; i < n; i++) {\n          this.output.push('\\n');\n        }\n      }\n    }\n  }, {\n    key: \"renderBlockContent\",\n    value: function renderBlockContent(block) {\n      var contentState = this.contentState;\n      var blockType = block.getType();\n      var text = block.getText();\n\n      if (text === '') {\n        // Prevent element collapse if completely empty.\n        // TODO: Replace with constant.\n        return \"\\u200B\";\n      }\n\n      var charMetaList = block.getCharacterList();\n      var entityPieces = getEntityRanges(text, charMetaList);\n      return entityPieces.map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            entityKey = _ref2[0],\n            stylePieces = _ref2[1];\n\n        var content = stylePieces.map(function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 2),\n              text = _ref4[0],\n              style = _ref4[1]; // Don't allow empty inline elements.\n\n\n          if (!text) {\n            return '';\n          }\n\n          var content = text; // Don't encode any text inside a code block.\n\n          if (blockType === BLOCK_TYPE.CODE) {\n            return content;\n          } // NOTE: We attempt some basic character escaping here, although\n          // I don't know if escape sequences are really valid in markdown,\n          // there's not a canonical spec to lean on.\n\n\n          if (style.has(CODE)) {\n            return '`' + encodeCode(content) + '`';\n          }\n\n          content = encodeContent(text);\n\n          if (style.has(BOLD)) {\n            content = \"**\".concat(content, \"**\");\n          }\n\n          if (style.has(UNDERLINE)) {\n            // TODO: encode `+`?\n            content = \"++\".concat(content, \"++\");\n          }\n\n          if (style.has(ITALIC)) {\n            content = \"_\".concat(content, \"_\");\n          }\n\n          if (style.has(STRIKETHROUGH)) {\n            // TODO: encode `~`?\n            content = \"~~\".concat(content, \"~~\");\n          }\n\n          return content;\n        }).join('');\n        var entity = entityKey ? contentState.getEntity(entityKey) : null;\n\n        if (entity != null && entity.getType() === ENTITY_TYPE.LINK) {\n          var data = entity.getData();\n          var url = data.href || data.url || '';\n          var title = data.title ? \" \\\"\".concat(escapeTitle(data.title), \"\\\"\") : '';\n          return \"[\".concat(content, \"](\").concat(encodeURL(url)).concat(title, \")\");\n        } else if (entity != null && entity.getType() === ENTITY_TYPE.IMAGE) {\n          var _data = entity.getData();\n\n          var src = _data.src || '';\n          var alt = _data.alt ? \"\".concat(escapeTitle(_data.alt)) : '';\n          return \"![\".concat(alt, \"](\").concat(encodeURL(src), \")\");\n        } else if (entity != null && entity.getType() === ENTITY_TYPE.EMBED) {\n          return entity.getData().url || content;\n        } else {\n          return content;\n        }\n      }).join('');\n    }\n  }]);\n\n  return MarkupGenerator;\n}();\n\nfunction canHaveDepth(blockType) {\n  switch (blockType) {\n    case BLOCK_TYPE.UNORDERED_LIST_ITEM:\n    case BLOCK_TYPE.ORDERED_LIST_ITEM:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nfunction encodeContent(text) {\n  return text.replace(/[*_`]/g, '\\\\$&');\n}\n\nfunction encodeCode(text) {\n  return text.replace(/`/g, '\\\\`');\n} // Encode chars that would normally be allowed in a URL but would conflict with\n// our markdown syntax: `[foo](http://foo/)`\n\n\nvar LINK_CHARACTER_REPLACEMENTS = {\n  '(': '%28',\n  ')': '%29'\n};\n\nfunction encodeURL(url) {\n  return url.replace(/[()]/g, function (_char) {\n    return LINK_CHARACTER_REPLACEMENTS[_char];\n  });\n} // Escape quotes using backslash.\n\n\nfunction escapeTitle(text) {\n  return text.replace(/\"/g, '\\\\\"');\n}\n\nexport default function stateToMarkdown(content, options) {\n  return new MarkupGenerator(content, options).generate();\n}","map":null,"metadata":{},"sourceType":"module"}