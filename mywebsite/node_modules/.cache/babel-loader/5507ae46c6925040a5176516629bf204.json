{"ast":null,"code":"import _defineProperty from \"/home/ec2-user/DUMDEV/mywebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { EditorState } from 'draft-js';\nconst INITAL_EDITOR_STATE = {\n  editorState: EditorState.createEmpty()\n};\nexport default ((state = INITAL_EDITOR_STATE, action) => {\n  if (action.type === 'UPDATE_EDITOR_STATE') {\n    return _objectSpread({}, state, {\n      editorState: action.payload\n    });\n  }\n\n  return state;\n});","map":{"version":3,"sources":["/home/ec2-user/DUMDEV/mywebsite/src/reducers/editorReducer.js"],"names":["EditorState","INITAL_EDITOR_STATE","editorState","createEmpty","state","action","type","payload"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA4B,UAA5B;AAEA,MAAMC,mBAAmB,GAAG;AAC3BC,EAAAA,WAAW,EAAEF,WAAW,CAACG,WAAZ;AADc,CAA5B;AAIA,gBAAe,CAACC,KAAK,GAACH,mBAAP,EAA4BI,MAA5B,KAAuC;AACrD,MAAGA,MAAM,CAACC,IAAP,KAAgB,qBAAnB,EAAyC;AACvC,6BAAWF,KAAX;AAAkBF,MAAAA,WAAW,EAAEG,MAAM,CAACE;AAAtC;AACD;;AACA,SAAOH,KAAP;AACD,CALD","sourcesContent":["import { EditorState } from 'draft-js';\n\nconst INITAL_EDITOR_STATE = {\n\teditorState: EditorState.createEmpty(),\n}\n\nexport default (state=INITAL_EDITOR_STATE, action) => {\n\tif(action.type === 'UPDATE_EDITOR_STATE'){\n\t\t\treturn {...state, editorState: action.payload };\n\t}\n\t\treturn state;\n};\n\n\n"]},"metadata":{},"sourceType":"module"}