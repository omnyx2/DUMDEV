{"ast":null,"code":"import _classCallCheck from\"/home/ec2-user/DUMDEV/mywebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/ec2-user/DUMDEV/mywebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/ec2-user/DUMDEV/mywebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/ec2-user/DUMDEV/mywebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/ec2-user/DUMDEV/mywebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import React from'react';import{Editor,EditorState,RichUtils,getDefaultKeyBinding}from'draft-js';import'./RichEditor.css';import{connect}from'react-redux';import{updateEditorState,updateEditorMarkdownState}from'../../actions';import{stateToMarkdown}from'draft-js-export-markdown';import Immutable from'immutable';var RichEditor=/*#__PURE__*/function(_React$Component){_inherits(RichEditor,_React$Component);function RichEditor(props){var _this;_classCallCheck(this,RichEditor);_this=_possibleConstructorReturn(this,_getPrototypeOf(RichEditor).call(this,props));_this.state={editorState:EditorState.createEmpty()};_this.focus=function(){return _this.refs.editor.focus();};_this.onChange=function(editorState){_this.props.updateEditorState({editorState:editorState});_this.setState({editorState:editorState});_this.props.updateEditorMarkdownState(stateToMarkdown(editorState.getCurrentContent()));};_this.handleKeyCommand=function(command){return _this._handleKeyCommand(command);};_this.onTab=function(e){return _this._onTab(e);};_this.toggleBlockType=function(type){return _this._toggleBlockType(type);};_this.toggleInlineStyle=function(style){return _this._toggleInlineStyle(style);};return _this;}_createClass(RichEditor,[{key:\"_handleKeyCommand\",value:function _handleKeyCommand(command){var editorState=this.state.editorState;var newState=RichUtils.handleKeyCommand(editorState,command);if(newState){this.onChange(newState);return true;}return false;}},{key:\"_onTab\",value:function _onTab(e){var maxDepth=4;this.onChange(RichUtils.onTab(e,this.state.editorState,maxDepth));}},{key:\"_toggleBlockType\",value:function _toggleBlockType(blockType){this.onChange(RichUtils.toggleBlockType(this.state.editorState,blockType));}},{key:\"_toggleInlineStyle\",value:function _toggleInlineStyle(inlineStyle){this.onChange(RichUtils.toggleInlineStyle(this.state.editorState,inlineStyle));}},{key:\"render\",value:function render(){var editorState=this.state.editorState;// If the user changes block type before entering any text, we can\n// either style the placeholder or hide it. Let's just hide it now.\nvar className='RichEditor-editor';var contentState=editorState.getCurrentContent();if(!contentState.hasText()){if(contentState.getBlockMap().first().getType()!=='unstyled'){className+=' RichEditor-hidePlaceholder';}}return React.createElement(\"div\",{className:\"RichEditor-root\"},React.createElement(BlockStyleControls,{editorState:editorState,onToggle:this.toggleBlockType}),React.createElement(InlineStyleControls,{editorState:editorState,onToggle:this.toggleInlineStyle}),React.createElement(\"div\",{className:className,onClick:this.focus},React.createElement(Editor,{blockStyleFn:getBlockStyle,customStyleMap:styleMap,editorState:editorState,handleKeyCommand:this.handleKeyCommand,onChange:this.onChange,onTab:this.onTab,placeholder:\"Tell a story...\",ref:\"editor\",spellCheck:true})));}}]);return RichEditor;}(React.Component);// Custom overrides for \"code\" style.\nvar styleMap={CODE:{backgroundColor:'rgba(0, 0, 0, 0.05)',fontFamily:'\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',fontSize:16,padding:2}};function getBlockStyle(block){switch(block.getType()){case'blockquote':return'RichEditor-blockquote';default:return null;}}var StyleButton=/*#__PURE__*/function(_React$Component2){_inherits(StyleButton,_React$Component2);function StyleButton(){var _this2;_classCallCheck(this,StyleButton);_this2=_possibleConstructorReturn(this,_getPrototypeOf(StyleButton).call(this));_this2.onToggle=function(e){e.preventDefault();_this2.props.onToggle(_this2.props.style);};return _this2;}_createClass(StyleButton,[{key:\"render\",value:function render(){var className='RichEditor-styleButton';if(this.props.active){className+=' RichEditor-activeButton';}return React.createElement(\"span\",{className:className,onMouseDown:this.onToggle},this.props.label);}}]);return StyleButton;}(React.Component);var BLOCK_TYPES=[{label:'H1',style:'header-one'},{label:'H2',style:'header-two'},{label:'H3',style:'header-three'},{label:'H4',style:'header-four'},{label:'H5',style:'header-five'},{label:'H6',style:'header-six'},{label:'Blockquote',style:'blockquote'},{label:'UL',style:'unordered-list-item'},{label:'OL',style:'ordered-list-item'},{label:'Code Block',style:'code-block'}];var BlockStyleControls=function BlockStyleControls(props){var editorState=props.editorState;var selection=editorState.getSelection();var blockType=editorState.getCurrentContent().getBlockForKey(selection.getStartKey()).getType();return React.createElement(\"div\",{className:\"RichEditor-controls\"},BLOCK_TYPES.map(function(type){return React.createElement(StyleButton,{key:type.label,active:type.style===blockType,label:type.label,onToggle:props.onToggle,style:type.style});}));};var INLINE_STYLES=[{label:'Bold',style:'BOLD'},{label:'Italic',style:'ITALIC'},{label:'Underline',style:'UNDERLINE'},{label:'Monospace',style:'CODE'}];var InlineStyleControls=function InlineStyleControls(props){var currentStyle=props.editorState.getCurrentInlineStyle();return React.createElement(\"div\",{className:\"RichEditor-controls\"},INLINE_STYLES.map(function(type){return React.createElement(StyleButton,{key:type.label,active:currentStyle.has(type.style),label:type.label,onToggle:props.onToggle,style:type.style});}));};var mapStateToProps=function mapStateToProps(state){return{editorState:state.editor.editorState};};export default connect(mapStateToProps,{updateEditorState:updateEditorState,updateEditorMarkdownState:updateEditorMarkdownState})(RichEditor);","map":{"version":3,"sources":["/home/ec2-user/DUMDEV/mywebsite/src/components/pages/RichEditor.js"],"names":["React","Editor","EditorState","RichUtils","getDefaultKeyBinding","connect","updateEditorState","updateEditorMarkdownState","stateToMarkdown","Immutable","RichEditor","props","state","editorState","createEmpty","focus","refs","editor","onChange","setState","getCurrentContent","handleKeyCommand","command","_handleKeyCommand","onTab","e","_onTab","toggleBlockType","type","_toggleBlockType","toggleInlineStyle","style","_toggleInlineStyle","newState","maxDepth","blockType","inlineStyle","className","contentState","hasText","getBlockMap","first","getType","getBlockStyle","styleMap","Component","CODE","backgroundColor","fontFamily","fontSize","padding","block","StyleButton","onToggle","preventDefault","active","label","BLOCK_TYPES","BlockStyleControls","selection","getSelection","getBlockForKey","getStartKey","map","INLINE_STYLES","InlineStyleControls","currentStyle","getCurrentInlineStyle","has","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Editor, EditorState, RichUtils, getDefaultKeyBinding } from 'draft-js';\nimport './RichEditor.css';\nimport { connect } from 'react-redux';\nimport { updateEditorState, updateEditorMarkdownState } from '../../actions';\nimport { stateToMarkdown } from 'draft-js-export-markdown';\nimport Immutable from 'immutable';\n\nclass RichEditor extends React.Component {\n        constructor(props) {\n          super(props);\n          this.state = {editorState: EditorState.createEmpty()};\n\n          this.focus = () => this.refs.editor.focus();\n\t\t  this.onChange = (editorState) => {\n\t\t  this.props.updateEditorState({ editorState });\n\t\t  this.setState({editorState});\n\t\t  this.props.updateEditorMarkdownState(stateToMarkdown(editorState.getCurrentContent()));\t\n\t\t};\n\n          this.handleKeyCommand = (command) => this._handleKeyCommand(command);\n          this.onTab = (e) => this._onTab(e);\n          this.toggleBlockType = (type) => this._toggleBlockType(type);\n          this.toggleInlineStyle = (style) => this._toggleInlineStyle(style);\n        }\n\n        _handleKeyCommand(command) {\n          const {editorState} = this.state;\n          const newState = RichUtils.handleKeyCommand(editorState, command);\n          if (newState) {\n            this.onChange(newState);\n            return true;\n          }\n          return false;\n        }\n\n        _onTab(e) {\n          const maxDepth = 4;\n          this.onChange(RichUtils.onTab(e, this.state.editorState, maxDepth));\n        }\n\n        _toggleBlockType(blockType) {\n          this.onChange(\n            RichUtils.toggleBlockType(\n              this.state.editorState,\n              blockType\n            )\n          );\n        }\n\n        _toggleInlineStyle(inlineStyle) {\n          this.onChange(\n            RichUtils.toggleInlineStyle(\n              this.state.editorState,\n              inlineStyle\n            )\n          );\n        }\n\n        render() {\n          const {editorState} = this.state;\n\n          // If the user changes block type before entering any text, we can\n          // either style the placeholder or hide it. Let's just hide it now.\n          let className = 'RichEditor-editor';\n          var contentState = editorState.getCurrentContent();\n          if (!contentState.hasText()) {\n            if (contentState.getBlockMap().first().getType() !== 'unstyled') {\n              className += ' RichEditor-hidePlaceholder';\n            }\n           }\n\n          return (\n            <div className=\"RichEditor-root\">\n              <BlockStyleControls\n                editorState={editorState}\n                onToggle={this.toggleBlockType}\n              />\n              <InlineStyleControls\n                editorState={editorState}\n                onToggle={this.toggleInlineStyle}\n              />\n              <div className={className} onClick={this.focus}>\n                <Editor\n                  blockStyleFn={getBlockStyle}\n                  customStyleMap={styleMap}\n                  editorState={editorState}\n                  handleKeyCommand={this.handleKeyCommand}\n                  onChange={this.onChange}\n                  onTab={this.onTab}\n                  placeholder=\"Tell a story...\"\n                  ref=\"editor\"\n                  spellCheck={true}\n                />\n              </div>\n            </div>\n          );\n        }\n      }\n\n      // Custom overrides for \"code\" style.\n      const styleMap = {\n        CODE: {\n          backgroundColor: 'rgba(0, 0, 0, 0.05)',\n          fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n          fontSize: 16,\n          padding: 2,\n        },\n      };\n\n      function getBlockStyle(block) {\n        switch (block.getType()) {\n          case 'blockquote': return 'RichEditor-blockquote';\n          default: return null;\n        }\n      }\n\n      class StyleButton extends React.Component {\n        constructor() {\n          super();\n          this.onToggle = (e) => {\n            e.preventDefault();\n            this.props.onToggle(this.props.style);\n          };\n        }\n\n        render() {\n          let className = 'RichEditor-styleButton';\n          if (this.props.active) {\n            className += ' RichEditor-activeButton';\n          }\n\n          return (\n            <span className={className} onMouseDown={this.onToggle}>\n              {this.props.label}\n            </span>\n          );\n        }\n      }\n\n      const BLOCK_TYPES = [\n        {label: 'H1', style: 'header-one'},\n        {label: 'H2', style: 'header-two'},\n        {label: 'H3', style: 'header-three'},\n        {label: 'H4', style: 'header-four'},\n        {label: 'H5', style: 'header-five'},\n        {label: 'H6', style: 'header-six'},\n        {label: 'Blockquote', style: 'blockquote'},\n        {label: 'UL', style: 'unordered-list-item'},\n        {label: 'OL', style: 'ordered-list-item'},\n        {label: 'Code Block', style: 'code-block'},\n      ];\n\n      const BlockStyleControls = (props) => {\n        const {editorState} = props;\n        const selection = editorState.getSelection();\n        const blockType = editorState\n          .getCurrentContent()\n          .getBlockForKey(selection.getStartKey())\n          .getType();\n\n        return (\n          <div className=\"RichEditor-controls\">\n            {BLOCK_TYPES.map((type) =>\n              <StyleButton\n                key={type.label}\n                active={type.style === blockType}\n                label={type.label}\n                onToggle={props.onToggle}\n                style={type.style}\n              />\n            )}\n          </div>\n        );\n      };\n\n      var INLINE_STYLES = [\n        {label: 'Bold', style: 'BOLD'},\n        {label: 'Italic', style: 'ITALIC'},\n        {label: 'Underline', style: 'UNDERLINE'},\n        {label: 'Monospace', style: 'CODE'},\n      ];\n\n      const InlineStyleControls = (props) => {\n        var currentStyle = props.editorState.getCurrentInlineStyle();\n        return (\n          <div className=\"RichEditor-controls\">\n            {INLINE_STYLES.map(type =>\n              <StyleButton\n                key={type.label}\n                active={currentStyle.has(type.style)}\n                label={type.label}\n                onToggle={props.onToggle}\n                style={type.style}\n              />\n            )}\n          </div>\n        );\n      };\n\n\nconst mapStateToProps = (state) => {\n\n\t\treturn {\n\t\t\teditorState: state.editor.editorState,\n\t\t}\n}\n\t\nexport default connect(mapStateToProps, { updateEditorState, updateEditorMarkdownState })(RichEditor);\n"]},"metadata":{},"sourceType":"module"}