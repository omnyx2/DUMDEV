{"ast":null,"code":"var _jsxFileName = \"/home/ec2-user/DUMDEV/mywebsite/src/components/pages/RichEditor.js\";\nimport React from 'react';\nimport { Editor, EditorState, RichUtils, getDefaultKeyBinding } from 'draft-js';\nimport './RichEditor.css';\nimport { connect } from 'react-redux';\nimport { updateEditorState, updateEditorMarkdownState } from '../../actions';\nimport { stateToMarkdown } from 'draft-js-export-markdown';\nimport Immutable from 'immutable';\n\nclass RichEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editorState: EditorState.createEmpty()\n    };\n\n    this.focus = () => this.refs.editor.focus();\n\n    this.onChange = editorState => {\n      this.props.updateEditorState({\n        editorState\n      });\n      this.setState({\n        editorState\n      });\n      this.props.updateEditorMarkdownState(stateToMarkdown(editorState.getCurrentContent()));\n    };\n\n    this.handleKeyCommand = command => this._handleKeyCommand(command);\n\n    this.onTab = e => this._onTab(e);\n\n    this.toggleBlockType = type => this._toggleBlockType(type);\n\n    this.toggleInlineStyle = style => this._toggleInlineStyle(style);\n  }\n\n  _handleKeyCommand(command) {\n    const editorState = this.state.editorState;\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n\n    if (newState) {\n      this.onChange(newState);\n      return true;\n    }\n\n    return false;\n  }\n\n  _onTab(e) {\n    const maxDepth = 4;\n    this.onChange(RichUtils.onTab(e, this.state.editorState, maxDepth));\n  }\n\n  _toggleBlockType(blockType) {\n    this.onChange(RichUtils.toggleBlockType(this.state.editorState, blockType));\n  }\n\n  _toggleInlineStyle(inlineStyle) {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, inlineStyle));\n  }\n\n  render() {\n    const editorState = this.state.editorState; // If the user changes block type before entering any text, we can\n    // either style the placeholder or hide it. Let's just hide it now.\n\n    let className = 'RichEditor-editor';\n    var contentState = editorState.getCurrentContent();\n\n    if (!contentState.hasText()) {\n      if (contentState.getBlockMap().first().getType() !== 'unstyled') {\n        className += ' RichEditor-hidePlaceholder';\n      }\n    }\n\n    return React.createElement(\"div\", {\n      className: \"RichEditor-root\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(BlockStyleControls, {\n      editorState: editorState,\n      onToggle: this.toggleBlockType,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(InlineStyleControls, {\n      editorState: editorState,\n      onToggle: this.toggleInlineStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: className,\n      onClick: this.focus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(Editor, {\n      blockStyleFn: getBlockStyle,\n      customStyleMap: styleMap,\n      editorState: editorState,\n      handleKeyCommand: this.handleKeyCommand,\n      onChange: this.onChange,\n      onTab: this.onTab,\n      placeholder: \"Tell a story...\",\n      ref: \"editor\",\n      spellCheck: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    })));\n  }\n\n} // Custom overrides for \"code\" style.\n\n\nconst styleMap = {\n  CODE: {\n    backgroundColor: 'rgba(0, 0, 0, 0.05)',\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    fontSize: 16,\n    padding: 2\n  }\n};\n\nfunction getBlockStyle(block) {\n  switch (block.getType()) {\n    case 'blockquote':\n      return 'RichEditor-blockquote';\n\n    default:\n      return null;\n  }\n}\n\nclass StyleButton extends React.Component {\n  constructor() {\n    super();\n\n    this.onToggle = e => {\n      e.preventDefault();\n      this.props.onToggle(this.props.style);\n    };\n  }\n\n  render() {\n    let className = 'RichEditor-styleButton';\n\n    if (this.props.active) {\n      className += ' RichEditor-activeButton';\n    }\n\n    return React.createElement(\"span\", {\n      className: className,\n      onMouseDown: this.onToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, this.props.label);\n  }\n\n}\n\nconst BLOCK_TYPES = [{\n  label: 'H1',\n  style: 'header-one'\n}, {\n  label: 'H2',\n  style: 'header-two'\n}, {\n  label: 'H3',\n  style: 'header-three'\n}, {\n  label: 'H4',\n  style: 'header-four'\n}, {\n  label: 'H5',\n  style: 'header-five'\n}, {\n  label: 'H6',\n  style: 'header-six'\n}, {\n  label: 'Blockquote',\n  style: 'blockquote'\n}, {\n  label: 'UL',\n  style: 'unordered-list-item'\n}, {\n  label: 'OL',\n  style: 'ordered-list-item'\n}, {\n  label: 'Code Block',\n  style: 'code-block'\n}];\n\nconst BlockStyleControls = props => {\n  const editorState = props.editorState;\n  const selection = editorState.getSelection();\n  const blockType = editorState.getCurrentContent().getBlockForKey(selection.getStartKey()).getType();\n  return React.createElement(\"div\", {\n    className: \"RichEditor-controls\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, BLOCK_TYPES.map(type => React.createElement(StyleButton, {\n    key: type.label,\n    active: type.style === blockType,\n    label: type.label,\n    onToggle: props.onToggle,\n    style: type.style,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  })));\n};\n\nvar INLINE_STYLES = [{\n  label: 'Bold',\n  style: 'BOLD'\n}, {\n  label: 'Italic',\n  style: 'ITALIC'\n}, {\n  label: 'Underline',\n  style: 'UNDERLINE'\n}, {\n  label: 'Monospace',\n  style: 'CODE'\n}];\n\nconst InlineStyleControls = props => {\n  var currentStyle = props.editorState.getCurrentInlineStyle();\n  return React.createElement(\"div\", {\n    className: \"RichEditor-controls\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, INLINE_STYLES.map(type => React.createElement(StyleButton, {\n    key: type.label,\n    active: currentStyle.has(type.style),\n    label: type.label,\n    onToggle: props.onToggle,\n    style: type.style,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  })));\n};\n\nconst mapStateToProps = state => {\n  return {\n    editorState: state.editor.editorState\n  };\n};\n\nexport default connect(mapStateToProps, {\n  updateEditorState,\n  updateEditorMarkdownState\n})(RichEditor);","map":{"version":3,"sources":["/home/ec2-user/DUMDEV/mywebsite/src/components/pages/RichEditor.js"],"names":["React","Editor","EditorState","RichUtils","getDefaultKeyBinding","connect","updateEditorState","updateEditorMarkdownState","stateToMarkdown","Immutable","RichEditor","Component","constructor","props","state","editorState","createEmpty","focus","refs","editor","onChange","setState","getCurrentContent","handleKeyCommand","command","_handleKeyCommand","onTab","e","_onTab","toggleBlockType","type","_toggleBlockType","toggleInlineStyle","style","_toggleInlineStyle","newState","maxDepth","blockType","inlineStyle","render","className","contentState","hasText","getBlockMap","first","getType","getBlockStyle","styleMap","CODE","backgroundColor","fontFamily","fontSize","padding","block","StyleButton","onToggle","preventDefault","active","label","BLOCK_TYPES","BlockStyleControls","selection","getSelection","getBlockForKey","getStartKey","map","INLINE_STYLES","InlineStyleControls","currentStyle","getCurrentInlineStyle","has","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Editor, EditorState, RichUtils, getDefaultKeyBinding } from 'draft-js';\nimport './RichEditor.css';\nimport { connect } from 'react-redux';\nimport { updateEditorState, updateEditorMarkdownState } from '../../actions';\nimport { stateToMarkdown } from 'draft-js-export-markdown';\nimport Immutable from 'immutable';\n\nclass RichEditor extends React.Component {\n        constructor(props) {\n          super(props);\n          this.state = {editorState: EditorState.createEmpty()};\n\n          this.focus = () => this.refs.editor.focus();\n\t\t  this.onChange = (editorState) => {\n\t\t  this.props.updateEditorState({ editorState });\n\t\t  this.setState({editorState});\n\t\t  this.props.updateEditorMarkdownState(stateToMarkdown(editorState.getCurrentContent()));\t\n\t\t};\n\n          this.handleKeyCommand = (command) => this._handleKeyCommand(command);\n          this.onTab = (e) => this._onTab(e);\n          this.toggleBlockType = (type) => this._toggleBlockType(type);\n          this.toggleInlineStyle = (style) => this._toggleInlineStyle(style);\n        }\n\n        _handleKeyCommand(command) {\n          const {editorState} = this.state;\n          const newState = RichUtils.handleKeyCommand(editorState, command);\n          if (newState) {\n            this.onChange(newState);\n            return true;\n          }\n          return false;\n        }\n\n        _onTab(e) {\n          const maxDepth = 4;\n          this.onChange(RichUtils.onTab(e, this.state.editorState, maxDepth));\n        }\n\n        _toggleBlockType(blockType) {\n          this.onChange(\n            RichUtils.toggleBlockType(\n              this.state.editorState,\n              blockType\n            )\n          );\n        }\n\n        _toggleInlineStyle(inlineStyle) {\n          this.onChange(\n            RichUtils.toggleInlineStyle(\n              this.state.editorState,\n              inlineStyle\n            )\n          );\n        }\n\n        render() {\n          const {editorState} = this.state;\n\n          // If the user changes block type before entering any text, we can\n          // either style the placeholder or hide it. Let's just hide it now.\n          let className = 'RichEditor-editor';\n          var contentState = editorState.getCurrentContent();\n          if (!contentState.hasText()) {\n            if (contentState.getBlockMap().first().getType() !== 'unstyled') {\n              className += ' RichEditor-hidePlaceholder';\n            }\n           }\n\n          return (\n            <div className=\"RichEditor-root\">\n              <BlockStyleControls\n                editorState={editorState}\n                onToggle={this.toggleBlockType}\n              />\n              <InlineStyleControls\n                editorState={editorState}\n                onToggle={this.toggleInlineStyle}\n              />\n              <div className={className} onClick={this.focus}>\n                <Editor\n                  blockStyleFn={getBlockStyle}\n                  customStyleMap={styleMap}\n                  editorState={editorState}\n                  handleKeyCommand={this.handleKeyCommand}\n                  onChange={this.onChange}\n                  onTab={this.onTab}\n                  placeholder=\"Tell a story...\"\n                  ref=\"editor\"\n                  spellCheck={true}\n                />\n              </div>\n            </div>\n          );\n        }\n      }\n\n      // Custom overrides for \"code\" style.\n      const styleMap = {\n        CODE: {\n          backgroundColor: 'rgba(0, 0, 0, 0.05)',\n          fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n          fontSize: 16,\n          padding: 2,\n        },\n      };\n\n      function getBlockStyle(block) {\n        switch (block.getType()) {\n          case 'blockquote': return 'RichEditor-blockquote';\n          default: return null;\n        }\n      }\n\n      class StyleButton extends React.Component {\n        constructor() {\n          super();\n          this.onToggle = (e) => {\n            e.preventDefault();\n            this.props.onToggle(this.props.style);\n          };\n        }\n\n        render() {\n          let className = 'RichEditor-styleButton';\n          if (this.props.active) {\n            className += ' RichEditor-activeButton';\n          }\n\n          return (\n            <span className={className} onMouseDown={this.onToggle}>\n              {this.props.label}\n            </span>\n          );\n        }\n      }\n\n      const BLOCK_TYPES = [\n        {label: 'H1', style: 'header-one'},\n        {label: 'H2', style: 'header-two'},\n        {label: 'H3', style: 'header-three'},\n        {label: 'H4', style: 'header-four'},\n        {label: 'H5', style: 'header-five'},\n        {label: 'H6', style: 'header-six'},\n        {label: 'Blockquote', style: 'blockquote'},\n        {label: 'UL', style: 'unordered-list-item'},\n        {label: 'OL', style: 'ordered-list-item'},\n        {label: 'Code Block', style: 'code-block'},\n      ];\n\n      const BlockStyleControls = (props) => {\n        const {editorState} = props;\n        const selection = editorState.getSelection();\n        const blockType = editorState\n          .getCurrentContent()\n          .getBlockForKey(selection.getStartKey())\n          .getType();\n\n        return (\n          <div className=\"RichEditor-controls\">\n            {BLOCK_TYPES.map((type) =>\n              <StyleButton\n                key={type.label}\n                active={type.style === blockType}\n                label={type.label}\n                onToggle={props.onToggle}\n                style={type.style}\n              />\n            )}\n          </div>\n        );\n      };\n\n      var INLINE_STYLES = [\n        {label: 'Bold', style: 'BOLD'},\n        {label: 'Italic', style: 'ITALIC'},\n        {label: 'Underline', style: 'UNDERLINE'},\n        {label: 'Monospace', style: 'CODE'},\n      ];\n\n      const InlineStyleControls = (props) => {\n        var currentStyle = props.editorState.getCurrentInlineStyle();\n        return (\n          <div className=\"RichEditor-controls\">\n            {INLINE_STYLES.map(type =>\n              <StyleButton\n                key={type.label}\n                active={currentStyle.has(type.style)}\n                label={type.label}\n                onToggle={props.onToggle}\n                style={type.style}\n              />\n            )}\n          </div>\n        );\n      };\n\n\nconst mapStateToProps = (state) => {\n\n\t\treturn {\n\t\t\teditorState: state.editor.editorState,\n\t\t}\n}\n\t\nexport default connect(mapStateToProps, { updateEditorState, updateEditorMarkdownState })(RichEditor);\n"]},"metadata":{},"sourceType":"module"}